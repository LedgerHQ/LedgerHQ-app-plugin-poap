import "core-js/stable";
import "regenerator-runtime/runtime";
import Eth from "@ledgerhq/hw-app-eth";
import { byContractAddress } from "@ledgerhq/hw-app-eth/erc20";
import Zemu from "@zondax/zemu";
import { TransportStatusError } from "@ledgerhq/errors";

const {NANOS_ETH_ELF_PATH, NANOX_ETH_ELF_PATH, NANOS_PARASWAP_LIB, NANOX_PARASWAP_LIB, sim_options_nanos, sim_options_nanox, TIMEOUT} = require("generic.js");

test("Test SimpleSwap", async () => {
  jest.setTimeout(100000);
  const sim = new Zemu(NANOS_ETH_ELF_PATH, NANOS_PARASWAP_LIB);
  try {
    await sim.start(sim_options_nanos);

    let transport = await sim.getTransport();
    const eth = new Eth(transport);

    // Original TX: https://etherscan.io/tx/0x6b2c4d8e3292d59712b3092fda9b92b2ea9f6714d43c31e80a2d720d541748b2
    // Send 2796.674211928951577378 CRV 
    // Receive ETH 2.6546870621893189
    // Max Fees: 0.0125817
    await expect(
      eth.signTransaction(
        "44'/60'/0'/0/0",
        "f9056d8203fc850bdfd63e008303c3ac941bd435f3c054b6e901b7b108a0ab7617c808677b80b90544cfc0afeb000000000000000000000000d533a949740bb3306d119cc777fa900ba034cd52000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee0000000000000000000000000000000000000000000000979ba6ba5598ad5b2200000000000000000000000000000000000000000000000024d757d1639ea2f40000000000000000000000000000000000000000000000002506bc99d69cdc60000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000001e0000000000000000000000000000000000000000000000000000000000000042000000000000000000000000000000000000000000000000000000000000004a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000050000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000def1c0ded9bec7f1a1670819833240f027b25eff0000000000000000000000001bd435f3c054b6e901b7b108a0ab7617c808677b0000000000000000000000000000000000000000000000000000000000000208aa77476c000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000d533a949740bb3306d119cc777fa900ba034cd520000000000000000000000000000000000000000000000002570c704bf68300000000000000000000000000000000000000000000000009924c024822e84000000000000000000000000000056178a0d5f301baf6cf3e1cd53d9863437345bf90000000000000000000000001bd435f3c054b6e901b7b108a0ab7617c808677b0000000000000000000000003be0d7d9365f085bb08c395d022c5834aae69a3a0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006095036f000000000000000000000000000000000000000000000000167cbd81571c7dbc0000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000001cf7758b0cce1249cd921b7341015e6a25dc7412e8e19e81482b1b3aa6e15160bd1222f2c76342d45135e03c8517cfa517def897267c877627ffd20fc811f125350000000000000000000000000000000000000000000000979ba6ba5598ad5b22e1829cfe000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001e40000000000000000000000000000000000000000000000000000000000000208000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b70617261737761702e696f000000000000000000000000000000000000000000018080"
      )
    );
  } finally {
    await sim.close();
  }
});
